!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([,function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9),i=n(22);let o=!1;function s(){const e=document.getElementById("pause");null!==e&&(!0===o?(o=!1,e.innerHTML="Pause",i.sendMessage({message:!1,type:r.ReceiveTypes.Pause})):(o=!0,e.innerHTML="Paused: 0",i.sendMessage({message:!0,type:r.ReceiveTypes.Pause})))}t.onPause=s;let a=!1;function c(){const e=document.getElementById("discard");null!==e&&(!0===a?(a=!1,e.innerHTML="Discard",i.sendMessage({message:!1,type:r.ReceiveTypes.Discard})):(a=!0,e.innerHTML="Resume",i.sendMessage({message:!0,type:r.ReceiveTypes.Discard})))}function u(){const e=document.getElementById("list");null!==e&&(e.innerHTML="")}t.onDiscard=c,t.onClear=u;let l=!0;function h(){const e=document.getElementById("showwarnings");if(null===e)return;!0===l?(l=!1,e.innerHTML="Show Warnings"):(l=!0,e.innerHTML="Don't Show Warnings");const t=document.getElementById("list");if(null===t)return;const n=t.getElementsByTagName("li");for(let e=0;e<n.length;++e)"warning"===n[e].dataset.type&&(n[e].style.display=!0===l?"inline":"none");i.checkResize()}t.onShowWarnings=h;let f=!0;function d(){const e=document.getElementById("showprints");if(null===e)return;!0===f?(f=!1,e.innerHTML="Show Prints"):(f=!0,e.innerHTML="Don't Show Prints");const t=document.getElementById("list");if(null===t)return;const n=t.getElementsByTagName("li");for(let e=0;e<n.length;++e)"print"===n[e].dataset.type&&(n[e].style.display=!0===f?"inline":"none");i.checkResize()}t.onShowPrints=d;let p=!0;function m(){!0===p?(p=!1,i.sendMessage({message:!1,type:r.ReceiveTypes.Reconnect})):(p=!0,i.sendMessage({message:!0,type:r.ReceiveTypes.Reconnect}));const e=document.getElementById("autoreconnect");null!==e&&(e.innerHTML=!0===p?"Reconnect":"Disconnect")}t.onAutoReconnect=m;let g=!1;function y(){const e=document.getElementById("timestamps");if(null===e)return;!0===g?(g=!1,e.innerHTML="Show Timestamps"):(g=!0,e.innerHTML="Don't Show Timestamps");const t=document.getElementById("list");if(null===t)return;const n=t.getElementsByTagName("li");for(let e=0;e<n.length;++e){const t=n[e].getElementsByTagName("span");if(void 0!==t)for(let e=0;e<t.length;e++){const n=t[e];n.hasAttribute("data-timestamp")&&(n.style.display=!0===g?"inline":"none")}}i.checkResize()}function v(){const e=document.getElementById("list");if(null===e)return;const t=e.getElementsByTagName("li"),n=[];for(let e=0;e<t.length;++e){const r=t[e].dataset.message;if(void 0===r)return;n.push(r)}i.sendMessage({message:n,type:r.ReceiveTypes.Save})}function w(){const e=document.getElementById("autoreconnect");null!==e&&(e.style.backgroundColor="Green")}function b(){const e=document.getElementById("autoreconnect");null!==e&&(e.style.backgroundColor="Red")}function E(e,t,n,r){const i=document.createElement("div"),o=document.createElement("span");o.appendChild(document.createTextNode(e.toFixed(3)+": ")),o.dataset.timestamp="true",o.style.display=!0===g?"inline":"none",i.appendChild(o);const s=document.createElement("span"),a=t.split("\n");let c=!0;for(const e of a){if(""===e.trim())continue;!1===c&&s.appendChild(document.createElement("br")),c=!1;const t=document.createTextNode(e);s.appendChild(t)}void 0!==r&&(s.style.color=r),i.appendChild(s),n.appendChild(i)}function T(e){e.messageType===r.MessageType.Print?S(e):C(e)}function _(){const e=document.getElementById("list");null!==e&&e.childElementCount>1e3&&null!==e.firstChild&&e.removeChild(e.firstChild)}function S(e){_();const t=document.getElementById("list");if(null===t)return;const n=document.createElement("li");n.style.fontFamily='Consolas, "Courier New", monospace',E(e.timestamp,e.line,n);const r=JSON.stringify(e);n.dataset.message=r,n.dataset.type="print",n.style.display=!0===f?"inline":"none",t.appendChild(n)}function A(e,t,n){E(e.timestamp,e.details,t,n),function(e,t,n){const r=document.createElement("div"),i=e.split("\n");let o=!0;for(const e of i){if(""===e.trim())continue;!1===o&&t.appendChild(document.createElement("br")),o=!1;const n=document.createTextNode("   from: "+e);t.appendChild(n)}void 0!==n&&(r.style.color=n),t.appendChild(r)}(e.location,t),function(e,t,n){const r=document.createElement("div"),i=e.split("\n");let o=!0;for(const e of i){if(""===e.trim())continue;!1===o&&r.appendChild(document.createElement("br")),o=!1;const t=document.createTextNode("     at: "+e);r.appendChild(t)}void 0!==n&&(r.style.color=n),t.appendChild(r)}(e.callStack,t),t.appendChild(document.createElement("br"))}function C(e){_();const t=document.getElementById("list");if(null===t)return;const n=document.createElement("li");n.style.fontFamily='Consolas, "Courier New", monospace';const o=JSON.stringify(e);n.dataset.expanded="false",n.dataset.message=o,e.messageType===r.MessageType.Warning?(n.dataset.type="warning",E(e.timestamp,e.details,n,"Yellow"),n.style.display=!0===l?"inline":"none"):(n.dataset.type="error",E(e.timestamp,e.details,n,"Red")),n.onclick=(()=>{if("true"===n.dataset.expanded){if(n.dataset.expanded="false",void 0===n.dataset.message)return;const e=JSON.parse(n.dataset.message);n.innerHTML="","warning"===n.dataset.type?E(e.timestamp,e.details,n,"Yellow"):E(e.timestamp,e.details,n,"Red")}else{if(n.dataset.expanded="true",void 0===n.dataset.message)return;const e=JSON.parse(n.dataset.message);n.innerHTML="","warning"===n.dataset.type?A(e,n,"Yellow"):A(e,n,"Red")}i.checkResize()}),t.appendChild(n)}function R(e){const t=e.target.files[0],n=new FileReader;n.onload=(e=>{const t=e.target,n=JSON.parse(t.result);for(const e of n)T(e);i.checkResize()}),n.readAsText(t)}t.onShowTimestamps=y,t.onSaveLog=v,t.onConnect=w,t.onDisconnect=b,t.addMessage=T,t.addPrint=S,t.expandError=A,t.addError=C,window.addEventListener("resize",()=>{i.checkResize()});let P=100;function L(e){const t=document.createElement("ul");return t.style.position="fixed",t.style.bottom="0px",e?t.style.left="0px":t.style.right="0px",t.style.listStyleType="none",t.style.padding="0",t.style.width="49.8%",t.style.marginBottom="1px",t}function M(e,t,n){const r=document.createElement("li"),i=document.createElement("button");return i.id=e,i.style.width="100%",i.appendChild(document.createTextNode(t)),i.addEventListener("click",n),r.appendChild(i),r}function B(){const e=document.getElementById("teamNumber");console.log("finding team number"),null!==e&&(console.log("sending message"),i.sendMessage({message:parseInt(e.value,10),type:r.ReceiveTypes.ChangeNumber}),console.log("sent message"))}function I(){const e=document.getElementById("mainDiv");if(void 0===e)return;const t=e;P=100,t.innerHTML="";const n=document.createElement("ul");n.id="list",n.style.listStyleType="none",n.style.padding="0",t.appendChild(n);const r=document.createElement("div");r.style.height="100px",t.appendChild(r);const i=L(!0);i.appendChild(M("pause","Pause",s)),i.appendChild(M("discard","Discard",c)),i.appendChild(M("clear","Clear",u)),i.appendChild(M("showprints","Don't Show Prints",d)),i.appendChild(M("switchPage","Switch to Viewer",()=>{x()})),t.appendChild(i);const o=L(!1);o.appendChild(M("showwarnings","Don't Show Warnings",h)),o.appendChild(M("autoreconnect","Disconnect",m)),o.appendChild(M("timestamps","Show Timestamps",y)),o.appendChild(M("savelot","Save Log",v));const a=document.createElement("li"),l=document.createElement("input");l.id="teamNumber",l.type="number",l.style.width="50%";const f=document.createElement("button");f.id="changeTeamNumber",f.style.width="24.9%",f.style.right="0",f.style.position="fixed",f.addEventListener("click",B),f.appendChild(document.createTextNode("Set Team Number")),a.appendChild(l),a.appendChild(f),o.appendChild(a),t.appendChild(o),!0!==p&&m()}function x(){const e=document.getElementById("mainDiv");if(void 0===e)return;!0===p&&m();const t=e;P=60,t.innerHTML="";const n=document.createElement("ul");n.id="list",n.style.listStyleType="none",n.style.padding="0",t.appendChild(n);const r=document.createElement("div");r.style.height="60px",t.appendChild(r);const i=L(!0),o=document.createElement("input");o.type="file",o.id="openFile",o.name="files[]",o.style.width="100%",o.addEventListener("change",R,!1),i.appendChild(o),i.appendChild(M("showprints","Don't Show Prints",d)),i.appendChild(M("switchPage","Switch to Live",()=>{I()})),t.appendChild(i);const s=L(!1);s.appendChild(M("showwarnings","Don't Show Warnings",h)),s.appendChild(M("timestamps","Show Timestamps",y)),t.appendChild(s)}t.checkResizeImpl=function(e){const t=e.clientHeight-P,n=document.getElementById("list");null!==n&&(n.clientHeight<t?(n.style.position="fixed",n.style.bottom=P+"px"):(n.style.position="static",n.style.bottom="auto"))},t.handleMessage=function(e){switch(e.type){case r.SendTypes.New:T(e.message),i.scrollImpl();break;case r.SendTypes.Batch:for(const t of e.message)T(t);i.scrollImpl();break;case r.SendTypes.PauseUpdate:const t=document.getElementById("pause");null!==t&&(t.innerHTML="Paused: "+e.message);break;case r.SendTypes.ConnectionChanged:!0===e.message?w():b()}i.checkResize()},t.setViewerPage=x,window.addEventListener("load",e=>{I()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Batch=0]="Batch",e[e.ConnectionChanged=1]="ConnectionChanged",e[e.PauseUpdate=2]="PauseUpdate",e[e.New=3]="New"}(t.SendTypes||(t.SendTypes={})),function(e){e[e.Discard=0]="Discard",e[e.Pause=1]="Pause",e[e.Save=2]="Save",e[e.Reconnect=3]="Reconnect",e[e.ChangeNumber=4]="ChangeNumber"}(t.ReceiveTypes||(t.ReceiveTypes={}))},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Print=2]="Print"}(r=t.MessageType||(t.MessageType={}));t.PrintMessage=class{constructor(e){this.messageType=r.Print;let t=0;this.timestamp=e.readFloatBE(t),t+=4,this.seqNumber=e.readInt16BE(t),t+=2;const n=e.slice(t);this.line=n.toString("utf8")}};t.ErrorMessage=class{constructor(e){let t=0;this.timestamp=e.readFloatBE(t),t+=4,this.seqNumber=e.readInt16BE(t),t+=2,this.numOccur=e.readInt16BE(t),t+=2,this.errorCode=e.readInt32BE(t),t+=4,this.flags=e.readUInt8(t),t+=1;let n=this.getSizedString(e,t);this.details=n.data,t+=n.byteLength,n=this.getSizedString(e,t),this.location=n.data,t+=n.byteLength,n=this.getSizedString(e,t),this.callStack=n.data,t+=n.byteLength,this.messageType=0!=(1&this.flags)?r.Error:r.Warning}getSizedString(e,t){const n=e.readUInt16BE(t);t+=2;const r=n+2;return{byteLength:r,data:e.toString("utf8",t,t+r-2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(10),i=n(11);const o=["172.22.11.2","127.0.0.1"],s=["roboRIO-TEAM-FRC.local","roboRIO-TEAM-FRC.lan","roboRIO-TEAM-FRC.frc-field.local"];class a{constructor(e,t,n){this.socket=e,this.promise=n,this.dsSocket=t}dispose(){this.socket.emit("dispose"),this.dsSocket.emit("dispose")}}class c{constructor(e,t){this.socket=e,this.promise=t}dispose(){this.socket.emit("dispose")}}function u(e,t){const n=new r.Socket;return new c(n,new Promise((r,i)=>{n.on("error",r=>{console.log("failed connection to "+t+" at "+e),n.end(),n.destroy(),n.removeAllListeners(),i()}),n.on("timeout",()=>{console.log("failed connection to "+t+" at "+e),n.end(),n.destroy(),n.removeAllListeners(),i()}),n.on("close",()=>{n.end(),n.destroy(),n.removeAllListeners(),i()}),n.on("dispose",()=>{console.log("disposed",t),i(),n.end(),n.destroy(),n.removeAllListeners()}),n.connect(e,t,()=>{n.removeAllListeners(),r(n)})}))}t.connectToRobot=async function(e,t,n){const c=[];t=Math.trunc(t);for(const t of o)c.push(u(e,t));for(const n of s)c.push(u(e,n.replace("TEAM",t.toString())));c.push(u(e,`10.${Math.trunc(t/100)}.${t%100}.2`)),c.push(function(e){const t=new r.Socket,n=new r.Socket;return new a(t,n,new Promise((r,i)=>{n.on("data",o=>{const s=JSON.parse(o.toString());if(0===s.robotIP)return n.end(),n.destroy(),n.removeAllListeners(),void i();let a="";const c=s.robotIP;a+=(c>>24&255)+".",a+=(c>>16&255)+".",a+=(c>>8&255)+".",a+=255&c,t.on("error",n=>{console.log("failed connection to "+c+" at "+e),t.end(),t.destroy(),t.removeAllListeners(),i()}),t.on("timeout",()=>{console.log("failed connection to "+c+" at "+e),t.end(),t.destroy(),t.removeAllListeners(),i()}),t.on("close",()=>{console.log("failed connection to "+c+" at "+e),t.end(),t.destroy(),t.removeAllListeners(),i()}),t.on("dispose",()=>{console.log("disposed ds connected"),i(),t.end(),t.destroy(),t.removeAllListeners()}),t.connect(e,a,()=>{t.removeAllListeners(),r(t)}),n.end(),n.destroy(),n.removeAllListeners()}),n.on("error",()=>{i()}),n.on("dispose",()=>{console.log("disposed ds"),i(),n.end(),n.destroy(),n.removeAllListeners()}),n.connect(1742,"127.0.0.1")}))}(e));const l=[];for(const e of c)l.push(e.promise);const h=function(e){let t;return{promise:new Promise((n,r)=>{t=i.setTimeout(()=>{n(void 0)},e)}),cancel(){void 0!==t&&(console.log("cancelled timer"),i.clearTimeout(t))}}}(n);l.push(h.promise);const f=await async function e(t){if(t.length<1)return Promise.reject("Can't start a race without promises!");const n=t.map((e,t)=>e.catch(()=>{throw t}));try{return await Promise.race(n)}catch(n){return console.log("reject promise"),t.splice(n,1)[0].catch(e=>console.log("A promise has been rejected, but awaiting others",e)),e(t)}}(l);if(void 0===f)for(const e of c){e.dispose();try{await e.promise}catch(e){}}else{h.cancel();for(const e of c)if(f!==e.socket){e.dispose();try{await e.promise}catch(e){}}}return f}},,,,function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(3)),r(n(4)),r(n(5)),r(n(14)),r(n(21))},function(e,t){},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(12),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i=1,o={},s=!1,a=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){l(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&l(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),r=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){l(e.data)},r=function(t){e.port2.postMessage(t)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var e=a.documentElement;r=function(t){var n=a.createElement("script");n.onreadystatechange=function(){l(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():r=function(e){setTimeout(l,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var s={callback:e,args:t};return o[i]=s,r(i),i++},c.clearImmediate=u}function u(e){delete o[e]}function l(e){if(s)setTimeout(l,0,e);else{var t=o[e];if(t){s=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{u(e),s=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(1),n(13))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,u=[],l=!1,h=-1;function f(){l&&c&&(l=!1,c.length?u=c.concat(u):h=-1,u.length&&d())}function d(){if(!l){var e=a(f);l=!0;for(var t=u.length;t;){for(c=u,u=[];++h<t;)c&&c[h].run();h=-1,t=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});const r=n(19),i=n(4),o=n(20),s=n(5),a=1e5;class c{constructor(){this.buf=new e(65535),this.count=0,this.frameSize=a}}t.RioConsole=class extends r.EventEmitter{constructor(){super(...arguments),this.discard=!1,this.connected=!1,this.autoReconnect=!0,this.cleanup=!1,this.condition=new o.PromiseCondition,this.dataStore=new c,this.teamNumber=0}stop(){this.cleanup=!0,this.closeSocket()}getAutoReconnect(){return this.autoReconnect}setAutoReconnect(e){this.autoReconnect=e,!0===e&&this.condition.set()}startListening(){this.promise=(async()=>{for(;!this.cleanup;){for(;!this.autoReconnect;){if(this.cleanup)return;await this.condition.wait(),this.condition.reset()}await this.runFunction(this.teamNumber)}console.log("finished loop")})()}closeSocket(){void 0!==this.closeFunc&&this.closeFunc()}disconnect(){this.closeSocket()}setTeamNumber(e){this.teamNumber=e}async dispose(){this.stop(),this.removeAllListeners(),await this.promise}async connect(e){const t=await s.connectToRobot(1741,e,2e3);if(void 0!==t)return t.setNoDelay(!0),t.setKeepAlive(!0,500),t}handleBuffer(e){for(;e.length>0;){if(this.dataStore.frameSize===a){if(this.dataStore.count<2){const t=Math.min(2-this.dataStore.count,e.length);if(e.copy(this.dataStore.buf,this.dataStore.count,0,t),this.dataStore.count+=t,e=e.slice(t),this.dataStore.count<2)return}this.dataStore.frameSize=this.dataStore.buf[0]<<8|this.dataStore.buf[1]}{let t=this.dataStore.frameSize-(this.dataStore.count-2);const n=Math.min(t,e.length);e.copy(this.dataStore.buf,this.dataStore.count,0,n),this.dataStore.count+=n,e=e.slice(n),0==(t-=n)&&(this.handleData(this.dataStore.buf),this.dataStore.count=0,this.dataStore.frameSize=a)}}}handleData(e){if(this.discard)return;let t=0,n=0;do{n=e.readUInt16BE(t),t+=2}while(0===n);const r=e.readUInt8(t);t++;const o=e.slice(3,n+2);if(11===r){const e=new i.ErrorMessage(o);this.emit("message",e)}else if(12===r){const e=new i.PrintMessage(o);this.emit("message",e)}}async runFunction(e){const t=await this.connect(e);if(void 0!==t){if(this.connected=!0,this.emit("connectionChanged",!0),console.log("succesfully connected"),t.on("data",e=>{this.handleBuffer(e)}),this.cleanup)return t.end(),t.destroy(),void t.removeAllListeners();await new Promise((e,n)=>{this.closeFunc=(()=>{t.end(),t.destroy(),t.removeAllListeners(),e(),console.log("closed locally")}),t.on("close",()=>{t.removeAllListeners(),e(),console.log("closed remotely (close)")}),t.on("end",()=>{t.removeAllListeners(),e(),console.log("closed remotely (end)")})}),this.connected=!1,this.emit("connectionChanged",!1)}else console.log("bad socket")}}}).call(this,n(15).Buffer)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(16),i=n(17),o=n(18);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=f(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),i=(e=a(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(c.isBuffer(t)){var n=0|d(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):f(e,t);if("Buffer"===t.type&&o(t.data))return f(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t){var n=t.length<0?0:0|d(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return j(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function g(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,s=1,a=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var l=-1;for(o=n;o<a;o++)if(u(e,o)===u(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(n+c>a&&(n=a-c),o=n;o>=0;o--){for(var h=!0,f=0;f<c;f++)if(u(e,o+f)!==u(t,f)){h=!1;break}if(h)return o}return-1}function v(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function w(e,t,n,r){return F(j(t,e.length-n),e,n,r)}function b(e,t,n,r){return F(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function E(e,t,n,r){return b(e,t,n,r)}function T(e,t,n,r){return F(z(t),e,n,r)}function _(e,t,n,r){return F(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function A(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,c,u=e[i],l=null,h=u>239?4:u>223?3:u>191?2:1;if(i+h<=n)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&u)<<6|63&o)>127&&(l=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&u)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=h}return function(e){var t=e.length;if(t<=C)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=C));return n}(r)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return u(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},c.allocUnsafe=function(e){return h(null,e)},c.allocUnsafeSlow=function(e){return h(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var s=e[n];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return L(this,t,n);case"utf8":case"utf-8":return A(this,t,n);case"ascii":return R(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,i){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,i>>>=0,this===e)return 0;for(var o=i-r,s=n-t,a=Math.min(o,s),u=this.slice(r,i),l=e.slice(t,n),h=0;h<a;++h)if(u[h]!==l[h]){o=u[h],s=l[h];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":return b(this,e,t,n);case"latin1":case"binary":return E(this,e,t,n);case"base64":return T(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function L(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=Y(e[o]);return i}function M(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function B(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,n,r,i,o){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function x(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function O(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function k(e,t,n,r,o){return o||O(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function N(e,t,n,r,o){return o||O(e,0,n,8),i.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=c.prototype;else{var i=t-e;n=new c(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},c.prototype.readUInt8=function(e,t){return t||B(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||B(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||B(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||B(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||B(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},c.prototype.readInt8=function(e,t){return t||B(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||B(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||B(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||B(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||B(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||B(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||B(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||B(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||B(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||I(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||I(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):x(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):x(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):U(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);I(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);I(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):x(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):x(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):U(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return k(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return k(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return N(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return N(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=c.isBuffer(e)?e:j(new c(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var D=/[^+\/0-9A-Za-z-_]/g;function Y(e){return e<16?"0"+e.toString(16):e.toString(16)}function j(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(1))},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=u(e),r=n[0],s=n[1],a=new o(function(e,t,n){return 3*(t+n)/4-n}(0,r,s)),c=0,l=s>0?r-4:r,h=0;h<l;h+=4)t=i[e.charCodeAt(h)]<<18|i[e.charCodeAt(h+1)]<<12|i[e.charCodeAt(h+2)]<<6|i[e.charCodeAt(h+3)],a[c++]=t>>16&255,a[c++]=t>>8&255,a[c++]=255&t;2===s&&(t=i[e.charCodeAt(h)]<<2|i[e.charCodeAt(h+1)]>>4,a[c++]=255&t);1===s&&(t=i[e.charCodeAt(h)]<<10|i[e.charCodeAt(h+1)]<<4|i[e.charCodeAt(h+2)]>>2,a[c++]=t>>8&255,a[c++]=255&t);return a},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(e,s,s+16383>a?a:s+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e){return r[e>>18&63]+r[e>>12&63]+r[e>>6&63]+r[63&e]}function h(e,t,n){for(var r,i=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),i.push(l(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,c=(1<<a)-1,u=c>>1,l=-7,h=n?i-1:0,f=n?-1:1,d=e[t+h];for(h+=f,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=f,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=u}return(d?-1:1)*s*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var s,a,c,u=8*o-i-1,l=(1<<u)-1,h=l>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?f/c:f*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[n+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[n+d]=255&s,d+=p,s/=256,u-=8);e[n+d-p]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function o(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,s,a,c,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var l=new Error('Uncaught, unspecified "error" event. ('+t+")");throw l.context=t,l}if(o(n=this._events[e]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),s=(u=n.slice()).length,c=0;c<s;c++)u[c].apply(this,a);return!0},n.prototype.addListener=function(e,t){var s;if(!r(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,r(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(s=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&s>0&&this._events[e].length>s&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!r(t))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},n.prototype.removeListener=function(e,t){var n,o,s,a;if(!r(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(s=(n=this._events[e]).length,o=-1,n===t||r(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(n)){for(a=s;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?r(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(r(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PromiseCondition=class{constructor(){this.hasBeenSet=!1,this.condSet=void 0}wait(){return new Promise((e,t)=>{this.condSet=(()=>{e()}),!0===this.hasBeenSet&&e()})}set(){this.hasBeenSet=!0,void 0!==this.condSet&&this.condSet()}reset(){this.condSet=void 0,this.hasBeenSet=!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.RioLogWindow=class{constructor(e,t){this.webview=void 0,this.rioConsole=void 0,this.running=!1,this.disposables=[],this.pausedArray=[],this.paused=!1,this.hiddenArray=[],this.windowProvider=e,this.rioConsoleProvider=t}start(e){this.running||(this.running=!0,this.createWebView(),this.createRioConsole(),void 0!==this.webview&&void 0!==this.rioConsole&&(this.webview.on("didDispose",()=>{void 0!==this.rioConsole&&(this.rioConsole.stop(),this.rioConsole.removeAllListeners()),this.rioConsole=void 0,this.webview=void 0,this.running=!1}),this.webview.on("didReceiveMessage",async e=>{await this.onMessageReceived(e)}),this.rioConsole.on("connectionChanged",async e=>{await this.onConnectionChanged(e)}),this.rioConsole.on("message",async e=>{await this.onNewMessageToSend(e)}),this.rioConsole.setTeamNumber(e),this.rioConsole.startListening()))}stop(){void 0!==this.webview&&this.webview.dispose()}dispose(){this.stop();for(const e of this.disposables)e.dispose()}createWebView(){this.webview=this.windowProvider.createWindowView(),this.webview.on("windowActive",async()=>{void 0!==this.webview&&(await this.webview.postMessage({message:this.hiddenArray,type:r.SendTypes.Batch}),void 0!==this.rioConsole&&(!0===this.rioConsole.connected?await this.webview.postMessage({message:!0,type:r.SendTypes.ConnectionChanged}):await this.webview.postMessage({message:!1,type:r.SendTypes.ConnectionChanged})))})}createRioConsole(){this.rioConsole=this.rioConsoleProvider.getRioConsole()}async sendPaused(){void 0!==this.webview&&(await this.webview.postMessage({message:this.pausedArray,type:r.SendTypes.Batch})||this.hiddenArray.push(...this.pausedArray),this.pausedArray=[])}async onConnectionChanged(e){void 0!==this.webview&&(e?await this.webview.postMessage({message:!0,type:r.SendTypes.ConnectionChanged}):await this.webview.postMessage({message:!1,type:r.SendTypes.ConnectionChanged}))}async onNewMessageToSend(e){void 0!==this.webview&&(!0===this.paused?(this.pausedArray.push(e),await this.webview.postMessage({message:this.pausedArray.length,type:r.SendTypes.PauseUpdate})):await this.webview.postMessage({message:e,type:r.SendTypes.New})||this.hiddenArray.push(e))}async onMessageReceived(e){if(void 0!==this.rioConsole)if(e.type===r.ReceiveTypes.Discard)this.rioConsole.discard=e.message;else if(e.type===r.ReceiveTypes.Pause){const t=this.paused;this.paused=e.message,!0===t&&!1===this.paused&&await this.sendPaused()}else if(e.type===r.ReceiveTypes.Save){if(void 0===this.webview)return;const t=[];for(const n of e.message){const e=JSON.parse(n);t.push(e)}await this.webview.handleSave(t)}else if(e.type===r.ReceiveTypes.Reconnect){const t=e.message;this.rioConsole.setAutoReconnect(t),!1===t&&this.rioConsole.disconnect()}else if(e.type===r.ReceiveTypes.ChangeNumber){const t=e.message;console.log("setting team number"),this.rioConsole.setTeamNumber(t)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=acquireVsCodeApi();t.checkResize=function(){r.checkResizeImpl(document.documentElement)},t.scrollImpl=function(){document.documentElement.scrollTop=document.documentElement.scrollHeight},t.sendMessage=function(e){i.postMessage(e,"*")},window.addEventListener("message",e=>{const t=e.data;r.handleMessage(t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,