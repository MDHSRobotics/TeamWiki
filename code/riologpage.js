!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=n(9),i=n(18);let o=!1;function r(){const e=document.getElementById("pause");null!==e&&(!0===o?(o=!1,e.innerHTML="Pause",i.sendMessage({message:!1,type:s.ReceiveTypes.Pause})):(o=!0,e.innerHTML="Paused: 0",i.sendMessage({message:!0,type:s.ReceiveTypes.Pause})))}t.onPause=r;let a=!1;function c(){const e=document.getElementById("discard");null!==e&&(!0===a?(a=!1,e.innerHTML="Discard",i.sendMessage({message:!1,type:s.ReceiveTypes.Discard})):(a=!0,e.innerHTML="Resume",i.sendMessage({message:!0,type:s.ReceiveTypes.Discard})))}function l(){const e=document.getElementById("list");null!==e&&(e.innerHTML="")}t.onDiscard=c,t.onClear=l;let d=!0;function u(){const e=document.getElementById("showwarnings");if(null===e)return;!0===d?(d=!1,e.innerHTML="Show Warnings"):(d=!0,e.innerHTML="Don't Show Warnings");const t=document.getElementById("list");if(null===t)return;const n=t.getElementsByTagName("li");for(let e=0;e<n.length;++e)"warning"===n[e].dataset.type&&(n[e].style.display=!0===d?"inline":"none");i.checkResize()}t.onShowWarnings=u;let h=!0;function p(){const e=document.getElementById("showprints");if(null===e)return;!0===h?(h=!1,e.innerHTML="Show Prints"):(h=!0,e.innerHTML="Don't Show Prints");const t=document.getElementById("list");if(null===t)return;const n=t.getElementsByTagName("li");for(let e=0;e<n.length;++e)"print"===n[e].dataset.type&&(n[e].style.display=!0===h?"inline":"none");i.checkResize()}t.onShowPrints=p;let m=!0;function f(){!0===m?(m=!1,i.sendMessage({message:!1,type:s.ReceiveTypes.Reconnect})):(m=!0,i.sendMessage({message:!0,type:s.ReceiveTypes.Reconnect}));const e=document.getElementById("autoreconnect");null!==e&&(e.innerHTML=!0===m?"Reconnect":"Disconnect")}t.onAutoReconnect=f;let y=!1;function g(){const e=document.getElementById("timestamps");if(null===e)return;!0===y?(y=!1,e.innerHTML="Show Timestamps"):(y=!0,e.innerHTML="Don't Show Timestamps");const t=document.getElementById("list");if(null===t)return;const n=t.getElementsByTagName("li");for(let e=0;e<n.length;++e){const t=n[e].getElementsByTagName("span");if(void 0!==t)for(let e=0;e<t.length;e++){const n=t[e];n.hasAttribute("data-timestamp")&&(n.style.display=!0===y?"inline":"none")}}i.checkResize()}function v(){const e=document.getElementById("list");if(null===e)return;const t=e.getElementsByTagName("li"),n=[];for(let e=0;e<t.length;++e){const s=t[e].dataset.message;if(void 0===s)return;n.push(s)}i.sendMessage({message:n,type:s.ReceiveTypes.Save})}function w(){const e=document.getElementById("autoreconnect");null!==e&&(e.style.backgroundColor="Green")}function T(){const e=document.getElementById("autoreconnect");null!==e&&(e.style.backgroundColor="Red")}function b(e,t,n,s){const i=document.createElement("div"),o=document.createElement("span");o.appendChild(document.createTextNode(e.toFixed(3)+": ")),o.dataset.timestamp="true",o.style.display=!0===y?"inline":"none",i.appendChild(o);const r=document.createElement("span"),a=t.split("\n");let c=!0;for(const e of a){if(""===e.trim())continue;!1===c&&r.appendChild(document.createElement("br")),c=!1;const t=document.createTextNode(e);r.appendChild(t)}void 0!==s&&(r.style.color=s),i.appendChild(r),n.appendChild(i)}function C(e){e.messageType===s.MessageType.Print?_(e):L(e)}function E(){const e=document.getElementById("list");null!==e&&e.childElementCount>1e3&&null!==e.firstChild&&e.removeChild(e.firstChild)}function _(e){E();const t=document.getElementById("list");if(null===t)return;const n=document.createElement("li");n.style.fontFamily='Consolas, "Courier New", monospace',b(e.timestamp,e.line,n);const s=JSON.stringify(e);n.dataset.message=s,n.dataset.type="print",n.style.display=!0===h?"inline":"none",t.appendChild(n)}function S(e,t,n){b(e.timestamp,e.details,t,n),function(e,t,n){const s=document.createElement("div"),i=e.split("\n");let o=!0;for(const e of i){if(""===e.trim())continue;!1===o&&t.appendChild(document.createElement("br")),o=!1;const n=document.createTextNode("   from: "+e);t.appendChild(n)}void 0!==n&&(s.style.color=n),t.appendChild(s)}(e.location,t),function(e,t,n){const s=document.createElement("div"),i=e.split("\n");let o=!0;for(const e of i){if(""===e.trim())continue;!1===o&&s.appendChild(document.createElement("br")),o=!1;const t=document.createTextNode("     at: "+e);s.appendChild(t)}void 0!==n&&(s.style.color=n),t.appendChild(s)}(e.callStack,t),t.appendChild(document.createElement("br"))}function L(e){E();const t=document.getElementById("list");if(null===t)return;const n=document.createElement("li");n.style.fontFamily='Consolas, "Courier New", monospace';const o=JSON.stringify(e);n.dataset.expanded="false",n.dataset.message=o,e.messageType===s.MessageType.Warning?(n.dataset.type="warning",b(e.timestamp,e.details,n,"Yellow"),n.style.display=!0===d?"inline":"none"):(n.dataset.type="error",b(e.timestamp,e.details,n,"Red")),n.onclick=(()=>{if("true"===n.dataset.expanded){if(n.dataset.expanded="false",void 0===n.dataset.message)return;const e=JSON.parse(n.dataset.message);n.innerHTML="","warning"===n.dataset.type?b(e.timestamp,e.details,n,"Yellow"):b(e.timestamp,e.details,n,"Red")}else{if(n.dataset.expanded="true",void 0===n.dataset.message)return;const e=JSON.parse(n.dataset.message);n.innerHTML="","warning"===n.dataset.type?S(e,n,"Yellow"):S(e,n,"Red")}i.checkResize()}),t.appendChild(n)}function M(e){const t=e.target.files[0],n=new FileReader;n.onload=(e=>{const t=e.target,n=JSON.parse(t.result);for(const e of n)C(e);i.checkResize()}),n.readAsText(t)}t.onShowTimestamps=g,t.onSaveLog=v,t.onConnect=w,t.onDisconnect=T,t.addMessage=C,t.addPrint=_,t.expandError=S,t.addError=L,window.addEventListener("resize",()=>{i.checkResize()});let P=100;function R(e){const t=document.createElement("ul");return t.style.position="fixed",t.style.bottom="0px",e?t.style.left="0px":t.style.right="0px",t.style.listStyleType="none",t.style.padding="0",t.style.width="49.8%",t.style.marginBottom="1px",t}function I(e,t,n){const s=document.createElement("li"),i=document.createElement("button");return i.id=e,i.style.width="100%",i.appendChild(document.createTextNode(t)),i.addEventListener("click",n),s.appendChild(i),s}function A(){const e=document.getElementById("teamNumber");console.log("finding team number"),null!==e&&(console.log("sending message"),i.sendMessage({message:parseInt(e.value,10),type:s.ReceiveTypes.ChangeNumber}),console.log("sent message"))}function k(){const e=document.getElementById("mainDiv");if(void 0===e)return;const t=e;P=100,t.innerHTML="";const n=document.createElement("ul");n.id="list",n.style.listStyleType="none",n.style.padding="0",t.appendChild(n);const s=document.createElement("div");s.style.height="100px",t.appendChild(s);const i=R(!0);i.appendChild(I("pause","Pause",r)),i.appendChild(I("discard","Discard",c)),i.appendChild(I("clear","Clear",l)),i.appendChild(I("showprints","Don't Show Prints",p)),i.appendChild(I("switchPage","Switch to Viewer",()=>{x()})),t.appendChild(i);const o=R(!1);o.appendChild(I("showwarnings","Don't Show Warnings",u)),o.appendChild(I("autoreconnect","Disconnect",f)),o.appendChild(I("timestamps","Show Timestamps",g)),o.appendChild(I("savelot","Save Log",v));const a=document.createElement("li"),d=document.createElement("input");d.id="teamNumber",d.type="number",d.style.width="50%";const h=document.createElement("button");h.id="changeTeamNumber",h.style.width="24.9%",h.style.right="0",h.style.position="fixed",h.addEventListener("click",A),h.appendChild(document.createTextNode("Set Team Number")),a.appendChild(d),a.appendChild(h),o.appendChild(a),t.appendChild(o),!0!==m&&f()}function x(){const e=document.getElementById("mainDiv");if(void 0===e)return;!0===m&&f();const t=e;P=60,t.innerHTML="";const n=document.createElement("ul");n.id="list",n.style.listStyleType="none",n.style.padding="0",t.appendChild(n);const s=document.createElement("div");s.style.height="60px",t.appendChild(s);const i=R(!0),o=document.createElement("input");o.type="file",o.id="openFile",o.name="files[]",o.style.width="100%",o.addEventListener("change",M,!1),i.appendChild(o),i.appendChild(I("showprints","Don't Show Prints",p)),i.appendChild(I("switchPage","Switch to Live",()=>{k()})),t.appendChild(i);const r=R(!1);r.appendChild(I("showwarnings","Don't Show Warnings",u)),r.appendChild(I("timestamps","Show Timestamps",g)),t.appendChild(r)}t.checkResizeImpl=function(e){const t=e.clientHeight-P,n=document.getElementById("list");null!==n&&(n.clientHeight<t?(n.style.position="fixed",n.style.bottom=P+"px"):(n.style.position="static",n.style.bottom="auto"))},t.handleMessage=function(e){switch(e.type){case s.SendTypes.New:C(e.message),i.scrollImpl();break;case s.SendTypes.Batch:for(const t of e.message)C(t);i.scrollImpl();break;case s.SendTypes.PauseUpdate:const t=document.getElementById("pause");null!==t&&(t.innerHTML="Paused: "+e.message);break;case s.SendTypes.ConnectionChanged:!0===e.message?w():T()}i.checkResize()},t.setViewerPage=x,window.addEventListener("load",e=>{k()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Batch=0]="Batch",e[e.ConnectionChanged=1]="ConnectionChanged",e[e.PauseUpdate=2]="PauseUpdate",e[e.New=3]="New"}(t.SendTypes||(t.SendTypes={})),function(e){e[e.Discard=0]="Discard",e[e.Pause=1]="Pause",e[e.Save=2]="Save",e[e.Reconnect=3]="Reconnect",e[e.ChangeNumber=4]="ChangeNumber"}(t.ReceiveTypes||(t.ReceiveTypes={}))},function(e,t,n){"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Print=2]="Print"}(s=t.MessageType||(t.MessageType={}));t.PrintMessage=class{constructor(e){this.messageType=s.Print;let t=0;this.timestamp=e.readFloatBE(t),t+=4,this.seqNumber=e.readInt16BE(t),t+=2;const n=e.slice(t);this.line=n.toString("utf8")}};t.ErrorMessage=class{constructor(e){let t=0;this.timestamp=e.readFloatBE(t),t+=4,this.seqNumber=e.readInt16BE(t),t+=2,this.numOccur=e.readInt16BE(t),t+=2,this.errorCode=e.readInt32BE(t),t+=4,this.flags=e.readUInt8(t),t+=1;let n=this.getSizedString(e,t);this.details=n.data,t+=n.byteLength,n=this.getSizedString(e,t),this.location=n.data,t+=n.byteLength,n=this.getSizedString(e,t),this.callStack=n.data,t+=n.byteLength,this.messageType=0!=(1&this.flags)?s.Error:s.Warning}getSizedString(e,t){const n=e.readUInt16BE(t);t+=2;const s=n+2;return{byteLength:s,data:e.toString("utf8",t,t+s-2)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=n(10),i=n(11);const o=["172.22.11.2","127.0.0.1"],r=["roboRIO-TEAM-FRC.local","roboRIO-TEAM-FRC.lan","roboRIO-TEAM-FRC.frc-field.local"];class a{constructor(e,t,n){this.socket=e,this.promise=n,this.dsSocket=t}dispose(){this.socket.emit("dispose"),this.dsSocket.emit("dispose")}}class c{constructor(e,t){this.socket=e,this.promise=t}dispose(){this.socket.emit("dispose")}}function l(e,t){const n=new s.Socket;return new c(n,new Promise((s,i)=>{n.on("error",s=>{console.log("failed connection to "+t+" at "+e),n.end(),n.destroy(),n.removeAllListeners(),i()}),n.on("timeout",()=>{console.log("failed connection to "+t+" at "+e),n.end(),n.destroy(),n.removeAllListeners(),i()}),n.on("close",()=>{n.end(),n.destroy(),n.removeAllListeners(),i()}),n.on("dispose",()=>{console.log("disposed",t),i(),n.end(),n.destroy(),n.removeAllListeners()}),n.connect(e,t,()=>{n.removeAllListeners(),s(n)})}))}t.connectToRobot=async function(e,t,n){const c=[];t=Math.trunc(t);for(const t of o)c.push(l(e,t));for(const n of r)c.push(l(e,n.replace("TEAM",t.toString())));c.push(l(e,`10.${Math.trunc(t/100)}.${t%100}.2`)),c.push(function(e){const t=new s.Socket,n=new s.Socket;return new a(t,n,new Promise((s,i)=>{n.on("data",o=>{const r=JSON.parse(o.toString());if(0===r.robotIP)return n.end(),n.destroy(),n.removeAllListeners(),void i();let a="";const c=r.robotIP;a+=(c>>24&255)+".",a+=(c>>16&255)+".",a+=(c>>8&255)+".",a+=255&c,t.on("error",n=>{console.log("failed connection to "+c+" at "+e),t.end(),t.destroy(),t.removeAllListeners(),i()}),t.on("timeout",()=>{console.log("failed connection to "+c+" at "+e),t.end(),t.destroy(),t.removeAllListeners(),i()}),t.on("close",()=>{console.log("failed connection to "+c+" at "+e),t.end(),t.destroy(),t.removeAllListeners(),i()}),t.on("dispose",()=>{console.log("disposed ds connected"),i(),t.end(),t.destroy(),t.removeAllListeners()}),t.connect(e,a,()=>{t.removeAllListeners(),s(t)}),n.end(),n.destroy(),n.removeAllListeners()}),n.on("error",()=>{i()}),n.on("dispose",()=>{console.log("disposed ds"),i(),n.end(),n.destroy(),n.removeAllListeners()}),n.connect(1742,"127.0.0.1")}))}(e));const d=[];for(const e of c)d.push(e.promise);const u=function(e){let t;return{promise:new Promise((n,s)=>{t=i.setTimeout(()=>{n(void 0)},e)}),cancel(){void 0!==t&&(console.log("cancelled timer"),i.clearTimeout(t))}}}(n);d.push(u.promise);const h=await async function e(t){if(t.length<1)return Promise.reject("Can't start a race without promises!");const n=t.map((e,t)=>e.catch(()=>{throw t}));try{return await Promise.race(n)}catch(n){return console.log("reject promise"),t.splice(n,1)[0].catch(e=>console.log("A promise has been rejected, but awaiting others",e)),e(t)}}(d);if(void 0===h)for(const e of c){e.dispose();try{await e.promise}catch(e){}}else{u.cancel();for(const e of c)if(h!==e.socket){e.dispose();try{await e.promise}catch(e){}}}return h}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,,,function(e,t,n){"use strict";function s(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),s(n(2)),s(n(3)),s(n(4)),s(n(14)),s(n(17))},function(e,t){},function(e,t,n){(function(e){var s=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,s,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,s,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(s,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(12),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(5))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var s,i=1,o={},r=!1,a=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,"[object process]"==={}.toString.call(e.process)?s=function(e){t.nextTick(function(){d(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&d(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),s=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){d(e.data)},s=function(t){e.port2.postMessage(t)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var e=a.documentElement;s=function(t){var n=a.createElement("script");n.onreadystatechange=function(){d(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():s=function(e){setTimeout(d,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return o[i]=r,s(i),i++},c.clearImmediate=l}function l(e){delete o[e]}function d(e){if(r)setTimeout(d,0,e);else{var t=o[e];if(t){r=!0;try{!function(e){var t=e.callback,s=e.args;switch(s.length){case 0:t();break;case 1:t(s[0]);break;case 2:t(s[0],s[1]);break;case 3:t(s[0],s[1],s[2]);break;default:t.apply(n,s)}}(t)}finally{l(e),r=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(5),n(13))},function(e,t){var n,s,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{s="function"==typeof clearTimeout?clearTimeout:r}catch(e){s=r}}();var c,l=[],d=!1,u=-1;function h(){d&&c&&(d=!1,c.length?l=c.concat(l):u=-1,l.length&&p())}function p(){if(!d){var e=a(h);d=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,d=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===r||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function f(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new m(e,t)),1!==l.length||d||a(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=f,i.addListener=f,i.once=f,i.off=f,i.removeListener=f,i.removeAllListeners=f,i.emit=f,i.prependListener=f,i.prependOnceListener=f,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=n(15),i=n(3),o=n(16),r=n(4);t.RioConsole=class extends s.EventEmitter{constructor(){super(...arguments),this.discard=!1,this.connected=!1,this.autoReconnect=!0,this.cleanup=!1,this.condition=new o.PromiseCondition,this.teamNumber=0}stop(){this.cleanup=!0,this.closeSocket()}getAutoReconnect(){return this.autoReconnect}setAutoReconnect(e){this.autoReconnect=e,!0===e&&this.condition.set()}startListening(){this.promise=(async()=>{for(;!this.cleanup;){for(;!this.autoReconnect;){if(this.cleanup)return;await this.condition.wait(),this.condition.reset()}await this.runFunction(this.teamNumber)}console.log("finished loop")})()}closeSocket(){void 0!==this.closeFunc&&this.closeFunc()}disconnect(){this.closeSocket()}setTeamNumber(e){this.teamNumber=e}async dispose(){this.stop(),this.removeAllListeners(),await this.promise}async connect(e){const t=await r.connectToRobot(1741,e,2e3);if(void 0!==t)return t.setNoDelay(!0),t.setKeepAlive(!0,500),t}handleData(e){if(this.discard)return;let t=0,n=0;do{n=e.readUInt16BE(t),t+=2}while(0===n);const s=e.readUInt8(t);t++;const o=e.slice(3,n+2),r=e.slice(2+n);if(11===s){const e=new i.ErrorMessage(o);this.emit("message",e)}else if(12===s){const e=new i.PrintMessage(o);this.emit("message",e)}r.length>0&&this.handleData(r)}async runFunction(e){const t=await this.connect(e);if(void 0!==t){if(this.connected=!0,this.emit("connectionChanged",!0),console.log("succesfully connected"),t.on("data",e=>{this.handleData(e)}),this.cleanup)return t.end(),t.destroy(),void t.removeAllListeners();await new Promise((e,n)=>{this.closeFunc=(()=>{t.end(),t.destroy(),t.removeAllListeners(),e(),console.log("closed locally")}),t.on("close",()=>{t.removeAllListeners(),e(),console.log("closed remotely (close)")}),t.on("end",()=>{t.removeAllListeners(),e(),console.log("closed remotely (end)")})}),this.connected=!1,this.emit("connectionChanged",!1)}else console.log("bad socket")}}},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function s(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function o(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,r,a,c,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var d=new Error('Uncaught, unspecified "error" event. ('+t+")");throw d.context=t,d}if(o(n=this._events[e]))return!1;if(s(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),r=(l=n.slice()).length,c=0;c<r;c++)l[c].apply(this,a);return!0},n.prototype.addListener=function(e,t){var r;if(!s(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,s(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(r=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!s(t))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},n.prototype.removeListener=function(e,t){var n,o,r,a;if(!s(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=(n=this._events[e]).length,o=-1,n===t||s(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(n)){for(a=r;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(s(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?s(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(s(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PromiseCondition=class{constructor(){this.hasBeenSet=!1,this.condSet=void 0}wait(){return new Promise((e,t)=>{this.condSet=(()=>{e()}),!0===this.hasBeenSet&&e()})}set(){this.hasBeenSet=!0,void 0!==this.condSet&&this.condSet()}reset(){this.condSet=void 0,this.hasBeenSet=!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=n(2);t.RioLogWindow=class{constructor(e,t){this.webview=void 0,this.rioConsole=void 0,this.running=!1,this.disposables=[],this.pausedArray=[],this.paused=!1,this.hiddenArray=[],this.windowProvider=e,this.rioConsoleProvider=t}start(e){this.running||(this.running=!0,this.createWebView(),this.createRioConsole(),void 0!==this.webview&&void 0!==this.rioConsole&&(this.webview.on("didDispose",()=>{void 0!==this.rioConsole&&(this.rioConsole.stop(),this.rioConsole.removeAllListeners()),this.rioConsole=void 0,this.webview=void 0,this.running=!1}),this.webview.on("didReceiveMessage",async e=>{await this.onMessageReceived(e)}),this.rioConsole.on("connectionChanged",async e=>{await this.onConnectionChanged(e)}),this.rioConsole.on("message",async e=>{await this.onNewMessageToSend(e)}),this.rioConsole.setTeamNumber(e),this.rioConsole.startListening()))}stop(){void 0!==this.webview&&this.webview.dispose()}dispose(){this.stop();for(const e of this.disposables)e.dispose()}createWebView(){this.webview=this.windowProvider.createWindowView(),this.webview.on("windowActive",async()=>{void 0!==this.webview&&(await this.webview.postMessage({message:this.hiddenArray,type:s.SendTypes.Batch}),void 0!==this.rioConsole&&(!0===this.rioConsole.connected?await this.webview.postMessage({message:!0,type:s.SendTypes.ConnectionChanged}):await this.webview.postMessage({message:!1,type:s.SendTypes.ConnectionChanged})))})}createRioConsole(){this.rioConsole=this.rioConsoleProvider.getRioConsole()}async sendPaused(){void 0!==this.webview&&(await this.webview.postMessage({message:this.pausedArray,type:s.SendTypes.Batch})||this.hiddenArray.push(...this.pausedArray),this.pausedArray=[])}async onConnectionChanged(e){void 0!==this.webview&&(e?await this.webview.postMessage({message:!0,type:s.SendTypes.ConnectionChanged}):await this.webview.postMessage({message:!1,type:s.SendTypes.ConnectionChanged}))}async onNewMessageToSend(e){void 0!==this.webview&&(!0===this.paused?(this.pausedArray.push(e),await this.webview.postMessage({message:this.pausedArray.length,type:s.SendTypes.PauseUpdate})):await this.webview.postMessage({message:e,type:s.SendTypes.New})||this.hiddenArray.push(e))}async onMessageReceived(e){if(void 0!==this.rioConsole)if(e.type===s.ReceiveTypes.Discard)this.rioConsole.discard=e.message;else if(e.type===s.ReceiveTypes.Pause){const t=this.paused;this.paused=e.message,!0===t&&!1===this.paused&&await this.sendPaused()}else if(e.type===s.ReceiveTypes.Save){if(void 0===this.webview)return;const t=[];for(const n of e.message){const e=JSON.parse(n);t.push(e)}await this.webview.handleSave(t)}else if(e.type===s.ReceiveTypes.Reconnect){const t=e.message;this.rioConsole.setAutoReconnect(t),!1===t&&this.rioConsole.disconnect()}else if(e.type===s.ReceiveTypes.ChangeNumber){const t=e.message;console.log("setting team number"),this.rioConsole.setTeamNumber(t)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=n(1),i=acquireVsCodeApi();t.checkResize=function(){s.checkResizeImpl(document.documentElement)},t.scrollImpl=function(){document.documentElement.scrollTop=document.documentElement.scrollHeight},t.sendMessage=function(e){i.postMessage(e,"*")},window.addEventListener("message",e=>{const t=e.data;s.handleMessage(t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,